/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 15 20:45:12 GMT 2022
 */

package com.baeldung.avltree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.baeldung.avltree.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.delete((-1));
      aVLTree0.delete(0);
      aVLTree0.delete((-1));
      aVLTree0.height();
      aVLTree0.insert((-1));
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree_Node1.height = (-1);
      aVLTree0.getBalance(aVLTree_Node1.right);
      aVLTree_Node1.height = 4243;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node0.left = aVLTree_Node1.right;
      aVLTree_Node1.left = aVLTree_Node0.left;
      aVLTree_Node1.right = aVLTree_Node0.left;
      aVLTree_Node0.height = 2212;
      // Undeclared exception!
      aVLTree0.delete((-1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1003));
      aVLTree0.delete((-1003));
      aVLTree0.insert(2873);
      aVLTree0.height();
      aVLTree0.delete((-834));
      aVLTree0.delete((-834));
      aVLTree0.insert((-1));
      aVLTree0.insert((-834));
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.find(0);
      aVLTree0.delete((-1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      int int1 = (-1379);
      aVLTree_Node0.key = 0;
      aVLTree_Node0.key = 2042;
      aVLTree0.find((-278));
      aVLTree_Node0.left = null;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.height = 0;
      // Undeclared exception!
      try { 
        aVLTree0.insert(int1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1126));
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1026);
      aVLTree0.insert(1026);
      aVLTree0.insert((-250));
      aVLTree0.delete(1026);
      int int0 = 1030;
      aVLTree0.insert(1030);
      // Undeclared exception!
      try { 
        aVLTree0.insert(1030);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(331);
      aVLTree0.delete(331);
      aVLTree0.delete(0);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.delete(0);
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.delete((-2713));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      aVLTree0.delete((-1));
      aVLTree_Node0.key = 331;
      aVLTree0.delete((-2713));
      aVLTree0.delete(0);
      aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.insert((-1));
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1558));
      int int0 = (-1470);
      aVLTree0.delete((-1470));
      aVLTree0.delete((-1470));
      aVLTree0.insert((-1470));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1528));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree0.insert((-1528));
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      aVLTree0.delete((-1528));
      aVLTree0.delete(0);
      aVLTree_Node2.key = 0;
      aVLTree0.delete((-1797));
      aVLTree_Node2.right = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node2);
      // Undeclared exception!
      aVLTree0.find(1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2625);
      aVLTree0.insert((-3099));
      aVLTree0.insert((-3187));
      aVLTree0.delete((-42));
      aVLTree0.insert((-42));
      aVLTree0.insert(1);
      aVLTree0.delete(519);
      aVLTree0.find(2625);
      aVLTree0.insert((-1436));
      aVLTree0.delete((-42));
      aVLTree0.find(2625);
      aVLTree0.delete(1);
      aVLTree0.find(2625);
      aVLTree0.find((-42));
      aVLTree0.find((-3099));
      aVLTree0.delete((-3435));
      aVLTree0.delete((-1435));
      aVLTree0.find(1);
      aVLTree0.find(2625);
      aVLTree0.find(10);
      aVLTree0.find((-2623));
      aVLTree0.find(765);
      aVLTree0.find((-2623));
      aVLTree0.find(0);
      aVLTree0.find((-1435));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1450));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(963);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node((-1450));
      assertNotNull(aVLTree_Node1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.key = 963;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.right.left = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.key = (-1450);
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0.right;
      assertEquals(0, aVLTree0.height());
      
      int int0 = (-3390);
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-122));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1663));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1);
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      int int3 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-3552));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(396);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1824));
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1824));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-42));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree0.delete((-1824));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find((-732));
      assertNull(aVLTree_Node2);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1824));
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertNull(aVLTree_Node1);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node2);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      assertNotNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = 0;
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertNull(aVLTree_Node1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree_Node0.left = null;
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-870));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertNotNull(aVLTree_Node2);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertEquals(0, aVLTree0.height());
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      
      aVLTree_Node2.right = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      int int1 = 0;
      aVLTree_Node2.right.height = (-870);
      assertEquals(0, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete((-870));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(2003);
      assertNotNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(2003);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(943);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-1840));
      assertNull(aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(2003);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, int0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node2);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      
      int int1 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-256));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-256));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-256));
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertNotNull(aVLTree_Node1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find((-1));
      assertNull(aVLTree_Node2);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1);
      assertNotNull(aVLTree_Node0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNull(aVLTree_Node1);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1450));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(963);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1450));
      assertNotNull(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.key = (-1450);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-3390));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(0, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree0.insert((-3390));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-3390));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("com.baeldung.avltree.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-256));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-256));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1));
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-256));
      assertNotNull(aVLTree_Node1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node1);
      assertEquals(1, int0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertNotNull(aVLTree_Node2);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find((-1));
      assertNotNull(aVLTree_Node3);
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node2));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node3, aVLTree_Node2);
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      
      aVLTree_Node3.left = aVLTree_Node2;
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node3);
      assertEquals((-2), int1);
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node2));
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node3, aVLTree_Node2);
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertSame(aVLTree_Node3, aVLTree_Node0);
      
      int int2 = aVLTree0.getBalance(aVLTree_Node2);
      assertEquals(0, int2);
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node3));
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node2, aVLTree_Node1);
      assertNotSame(aVLTree_Node2, aVLTree_Node3);
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertNotNull(aVLTree0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNotNull(aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.right;
      assertNotNull(aVLTree_Node1);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree_Node1.right = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.height = (-1);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node1.right);
      assertEquals(0, int1);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      
      aVLTree_Node1.height = 4243;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, int2);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node0, aVLTree_Node1);
      
      aVLTree_Node1.left = aVLTree_Node0.left;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0.left;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = 2212;
      assertEquals(2212, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.delete((-1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(2625);
      aVLTree0.insert((-3099));
      aVLTree0.insert((-3187));
      aVLTree0.delete((-42));
      aVLTree0.insert((-42));
      aVLTree0.insert(1);
      aVLTree0.delete(519);
      aVLTree0.find(2625);
      aVLTree0.insert((-1436));
      aVLTree0.delete((-42));
      aVLTree0.find(2625);
      aVLTree0.delete(1);
      aVLTree0.find(2625);
      aVLTree0.find((-42));
      aVLTree0.find((-3099));
      aVLTree0.delete((-1435));
      aVLTree0.find(1);
      aVLTree0.find(2625);
      aVLTree0.find(10);
      aVLTree0.find((-2623));
      aVLTree0.find(765);
      aVLTree0.find((-2623));
      aVLTree0.find(0);
      aVLTree0.find((-1435));
      assertEquals(2, aVLTree0.height());
  }
}
